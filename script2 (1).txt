# Ensure the script is running with appropriate privileges
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator))
{
    Write-Host "Please run PowerShell as an Administrator."
    exit
}

# Direct path to the Edge password storage file
$edgePasswordFile = "C:\Users\buddy\AppData\Local\Microsoft\Edge\User Data\Default\Login Data"

# Check if the file exists
if (Test-Path $edgePasswordFile)
{
    Write-Host "Edge password file located. Proceed with authorized security analysis."

    # Copy the file to a working directory
    $workingDir = "$env:TEMP\EdgePasswords"
    New-Item -ItemType Directory -Path $workingDir -Force
    $copiedFile = "$workingDir\LoginData.db"
    Copy-Item $edgePasswordFile $copiedFile

    # Use PSSQLite to interact with the database
    Import-Module PSSQLite
    $query = "SELECT action_url, username_value, password_value FROM logins"
    $results = Invoke-SqliteQuery -DataSource $copiedFile -Query $query

    # Output file
    $outputFile = "$workingDir\EdgePasswordsDump.txt"
    Remove-Item -Path $outputFile -ErrorAction Ignore

    foreach ($result in $results)
    {
        $url = $result.action_url
        $username = $result.username_value
        $encryptedPassword = $result.password_value

        # Converting encrypted password to a readable hex string
        $hexEncryptedPassword = [BitConverter]::ToString($encryptedPassword) -replace '-',''

        # Write the details to a text file
        $line = "URL: $url, Username: $username, EncryptedPassword: $hexEncryptedPassword"
        Add-Content -Path $outputFile -Value $line
    }

    Write-Host "Encrypted password data exported to $outputFile"
}
else
{
    Write-Host "Edge password file not found."
}
